"""Add username column to User table

Revision ID: 08663ef29901
Revises: 
Create Date: 2025-03-13 05:56:00.202280

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '08663ef29901'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('bookings')
    op.drop_table('users')
    op.drop_table('payment')
    op.drop_table('category')
    with op.batch_alter_table('booking', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('category', sa.String(length=255), nullable=False))
        batch_op.add_column(sa.Column('sub_category', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('date', sa.DateTime(), nullable=False))
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_constraint('booking_category_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'])
        batch_op.drop_column('status')
        batch_op.drop_column('category_id')
        batch_op.drop_column('booking_id')
        batch_op.drop_column('booking_date')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('username', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('password', sa.String(length=255), nullable=False))
        batch_op.add_column(sa.Column('phone', sa.String(length=20), nullable=False))
        batch_op.alter_column('full_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.create_unique_constraint(None, ['username'])
        batch_op.drop_column('name')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('email',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=120),
               existing_nullable=False)
        batch_op.alter_column('full_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
        batch_op.drop_column('phone')
        batch_op.drop_column('password')
        batch_op.drop_column('username')

    with op.batch_alter_table('booking', schema=None) as batch_op:
        batch_op.add_column(sa.Column('booking_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('booking_id', sa.INTEGER(), autoincrement=True, nullable=False))
        batch_op.add_column(sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('booking_category_id_fkey', 'category', ['category_id'], ['category_id'], ondelete='CASCADE')
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('date')
        batch_op.drop_column('sub_category')
        batch_op.drop_column('category')
        batch_op.drop_column('id')

    op.create_table('category',
    sa.Column('category_id', sa.INTEGER(), server_default=sa.text("nextval('category_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('category_id', name='category_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('payment',
    sa.Column('payment_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('booking_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('payment_status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('payment_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['booking.booking_id'], name='payment_booking_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('payment_id', name='payment_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('bookings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('booking_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('sub_category', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='bookings_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='bookings_pkey')
    )
    # ### end Alembic commands ###
